/*
Ваш друг недавно узнал про взаимно простые числа. Пара чисел (a, b) называется взаимно простой, если максимальное число, которое делит оба числа a и b, равно единице.

Ваш друг часто придумывает разные утверждения. Недавно он предположил, что если пара чисел (a, b) является взаимно простой и пара чисел (b, c) является взаимно простой, то пара чисел (a, c) является взаимно простой.

Вы хотите опровергнуть утверждение вашего друга. Ваша задача — найти тройку различных чисел (a, b, c), для которой утверждение вашего друга неверно, и числа в тройке удовлетворяют условию l ≤ a < b < c ≤ r.

Формально, вам нужно найти тройку чисел (a, b, c), такую что l ≤ a < b < c ≤ r, пары (a, b) и (b, c) взаимно простые, а пара (a, c) не является взаимно простой.

Входные данные
В единственной строке записано два целых положительных числа через пробел l, r (1 ≤ l ≤ r ≤ 1018; r - l ≤ 50).

Выходные данные
В единственной строке выведите три целых положительных числа через пробел a, b, c — искомую тройку различных чисел (a, b, c). Если существует несколько решений, разрешается вывести любое. Числа в тройке необходимо выводить в порядке возрастания.

Если искомой тройки не существует, выведите единственное число -1.

Примеры
входные данные
2 4
выходные данные
2 3 4
входные данные
10 11
выходные данные
-1
входные данные
900000000000000009 900000000000000029
выходные данные
900000000000000009 900000000000000010 900000000000000021
*/

import java.util.Scanner;

public class Task483A {

	public static long gCD (long x, long y) {
		long result;
		if (x != 0) {
			result = gCD(y % x, x);
		} else {
			result = y;
		}
		return result;
	}
	
	public static void main (String[] args) {
		Scanner sc = new Scanner(System.in);
		long l = sc.nextLong();
		long r = sc.nextLong();
		long[] triple = new long[3];
		boolean flag = false;
		for (long a = l; a <= r; a++) {
			for (long b = a+1; b <= r; b++) {
				for (long c = b+1; c <= r; c++) {
					if ((gCD(a,b) == 1) && (gCD(c,b) == 1) && (gCD(a,c) != 1)) {
						if (a != b && a != c && b != c) {
							flag = true;
							triple[0] = a;	
							triple[1] = b;	
							triple[2] = c;	
						}
					}
				}
			}
		}
		for (int i = 0; i < triple.length - 1; i++) {
			boolean swapped = true;
			for (int j = 0; j < triple.length - 1 - i; j++) {
				if (triple[j] > triple[j+1]) {
					long temp = triple[j];
					triple[j] = triple[j+1];
					triple[j+1] = temp;
					swapped = false;
				}
			}
			if (swapped) {
				break;
			}
		}
		if (flag) {
			for (int i = 0; i < triple.length; i++) {
				System.out.print(triple[i] + " ");
			}
		} else {
			System.out.println("-1");
		}
	}
}
