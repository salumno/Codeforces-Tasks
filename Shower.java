/*
Много студентов живут в общежитии. Общежитие — это большой мир веселых развлечений и возможностей, но у него есть свои минусы.

В общежитии всего один душ, а желающих принять душ утром, конечно, больше. Поэтому каждое утро перед душем общежития образуется очередь из пяти человек. Как только душ открывается, первый человек из очереди заходит в душ. Спустя некоторое время, когда первый зашедший выходит из душа, следующий заходит в душ. Этот процесс продолжается, пока все в очереди не примут душ.

Душ — дело не быстрое, поэтому во время ожидания студенты общаются. В каждый момент времени студенты общаются парами: (2i - 1)-й человек в очереди (на текущий момент) общается с (2i)-м.

Рассмотрим этот процесс подробнее. Обозначим людей цифрами от 1 до 5. Пусть изначально очередь имеет вид 23154 (человек 2 стоит в начале очереди). Тогда перед открытием душа 2 общается с 3, 1 общается с 5, 4 ни с кем не общается. Затем 2 заходит в душ. Пока 2 принимает душ, 3 и 1 общаются, а также 5 и 4 общаются. Затем 3 заходит в душ. Пока 3 принимает душ, 1 и 5 общаются, 4 ни с кем не общается. Затем 1 заходит в душ, а пока он принимает душ, 5 и 4 общаются. Затем 5 заходит в душ, а затем 4 заходит в душ.

Известно, что если студенты i и j общаются, то радость студента i увеличивается на gij, а радость студента j увеличивается на gji. Вам надо найти такой изначальный порядок студентов в очереди, чтобы суммарная радость всех студентов в итоге была максимальной. Стоит заметить, что некоторые студенты могут общаться несколько раз. В приведенном выше примере студенты 1 и 5 общаются пока ждут открытия душа, а также пока 3 принимает душ.

Входные данные
Входные данные состоят из пяти строк, в каждой строке записано пять целых чисел разделенных пробелом: j-е число в i-й строке обозначает gij (0 ≤ gij ≤ 105). Гарантируется, что gii = 0 для всех i.

Считайте, что студенты пронумерованы от 1 до 5.

Выходные данные
Выведите единственное целое число — максимально возможную суммарную радость студентов.

Примеры
входные данные
0 0 0 0 9
0 0 0 0 0
0 0 0 0 0
0 0 0 0 0
7 0 0 0 0
выходные данные
32
входные данные
0 43 21 18 2
3 0 21 11 65
5 2 0 1 4
54 62 12 0 99
87 64 81 33 0
выходные данные
620
*/

import java.util.Scanner;

public class Shower {

    public static boolean diffElements (int[] array) {
        boolean flag = true;
        for (int i = 0; i < array.length; i++)
            for (int j = 0; j < array.length; j++) {
                if (array[j] == array[i] && i != j) {
                    flag = false;
                    break;
                }
            }
        return flag;
    }

    public static int arrSum (int[] comb, int[][] g) {
        int sum1 = g[comb[0]-1][comb[1]-1] + g[comb[1]-1][comb[0]-1] + g[comb[2]-1][comb[3]-1] + g[comb[3]-1][comb[2]-1];
        int sum2 = g[comb[1]-1][comb[2]-1] + g[comb[2]-1][comb[1]-1] + g[comb[3]-1][comb[4]-1] + g[comb[4]-1][comb[3]-1];
        int sum3 = g[comb[2]-1][comb[3]-1] + g[comb[3]-1][comb[2]-1];
        int sum4 = g[comb[3]-1][comb[4]-1] + g[comb[4]-1][comb[3]-1];
        int sum = sum1 + sum2 + sum3 + sum4;
        return sum;
    }

    public static void main (String[] args) {
        Scanner sc = new Scanner(System.in);
        int[][] g = new int[5][5];
        for (int i = 0; i < 5; i++) {
            for (int j = 0; j < 5; j++) {
                g[i][j] = sc.nextInt(); // read "happy points"
            }
        }
        int max = -1;
        int[] c = new int[5];
        for (int i = 1; i < 6; i++)
            for (int j = 1; j < 6; j++)
                for (int k = 1; k < 6; k++)
                    for (int l = 1; l < 6; l++)
                        for (int m = 1; m < 6; m++) {
                            c[0] = i;
                            c[1] = j;
                            c[2] = k;
                            c[3] = l;
                            c[4] = m;
                            if (diffElements(c)) {
                                if (arrSum(c, g) > max) {
                                    max = arrSum(c, g);
                                }
                            }
                        }

        System.out.println(max);
    }
}
